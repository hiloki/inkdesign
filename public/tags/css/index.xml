<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on inkdesign</title>
    <link>http://localhost:1313/tags/css/</link>
    <description>Recent content in Css on inkdesign</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-ja</language>
    <lastBuildDate>Mon, 23 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSSカスタムプロパティとMythの話</title>
      <link>http://localhost:1313/notes/css-custom-property/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/css-custom-property/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://dev.w3.org/csswg/css-variables/&#34;&gt;CSS Custom Properties for Cascading Variables Module&lt;/a&gt;はCSSで変数を使うために、その変数を定義するためのプロパティについての仕様だ。&lt;/p&gt;

&lt;p&gt;これが先日&lt;a href=&#34;http://nightly.mozilla.org/&#34;&gt;Firefox Nightly 29&lt;/a&gt;で実装されたらしく、ちょっとお触りしてみた。これについては同じようにお触りされた記事、&lt;a href=&#34;http://thatemil.com/blog/2013/12/15/playing-around-with-css-variables-custom-properties/&#34;&gt;Playing around with CSS variables - &amp;ldquo;custom properties&amp;rdquo;&lt;/a&gt;が良かったのでこっちも参照するのをおすすめする。&lt;/p&gt;

&lt;h2 id=&#34;基本的な使い方:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;基本的な使い方&lt;/h2&gt;

&lt;p&gt;CSSで変数というと、&lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;や&lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt;などのプリプロセッサとして使うことができ、そのあたりで使ったことがあるのであれば、CSSerの人でもなんとなく馴染みやすい仕様かもしれない。とはいえ定義とその参照方法はSassやLESSのそれとは全然異なる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*
変数を定義する。
`var-`の後が参照する時のキーになる。
 */
:root {
  var-box-padding: 20px;
  var-background-color: green;
  var-text-color: white;
}

/*
`var()`で参照する。
*/

.box {
  padding: var(box-padding);
  background-color: var(background-color);
  color: var(text-color);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように書けば、次のようなCSSを書いたときと同等になる。&lt;/p&gt;

&lt;div class=&#34;entry__media&#34;&gt;
![](/images/css-custom-property/01.png)
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  padding: 20px;
  background-color: green;
  color: white;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;変数をどう使うか:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;変数をどう使うか&lt;/h2&gt;

&lt;p&gt;Sassの時でもあんまり自分は変数をそれほど有用性のある使い方をしているとは思わない。が、その中でも使えると思うのは、そのプロジェクトのキーカラーの定義を&lt;code&gt;$keyColor: red&lt;/code&gt;とするような使い方がまず一つ。カスタムプロパティでは&lt;code&gt;var-key-color: red&lt;/code&gt;というように。&lt;/p&gt;

&lt;p&gt;他にはメディアクエリで特定のスクリーンサイズ向けの定義を各所でおこないたい場合には、その条件を変数として定義することがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;$tablet: 40em;

@media only screen and (max-width: $tablet) {
  body {
    color: blue;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしこのノリでカスタムプロパティで実現しようとしても上手くいかなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:root {
  var-query-tablet: 40em;
}

@media only screen and (max-width: var(query-tablet)) {
  body {
    color: blue;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実現する方法は今のところ浮かんでない。閃けばまたの機会に。&lt;/p&gt;

&lt;p&gt;あとおまけで、次のページにアクセスすると、&lt;a href=&#34;http://cdpn.io/Dfbng&#34;&gt;対象ブラウザがカスタムプロパティに対応しているかどうか分かる&lt;/a&gt;ようにしてみた。すごく馬鹿げたような方法でやってみたので、FirefoxのNightly 29をもしインストールしたならば覗いてみてほしい。&lt;/p&gt;

&lt;h2 id=&#34;スコープとポストプロセッサーmyth:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;スコープとポストプロセッサーMyth&lt;/h2&gt;

&lt;p&gt;先に紹介した記事ではあまり触れられていなかったスコープについて検証してみる。Sassなどではネストの中で変数に違う値が入れば、そちらが優先される。&lt;/p&gt;

&lt;h3 id=&#34;html:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;Default&amp;lt;/h1&amp;gt;
&amp;lt;div class=&amp;quot;first&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;First&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;blah,blah,blah&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sass:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;Sass&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;$color: blue;

h1 {
  color: $color; // blue
}

.first {
  $color: green;
  h1 {
    color: $color; // green
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次のようになる。&lt;/p&gt;

&lt;h3 id=&#34;css:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;h1 {
  color: blue;
}

.first h1 {
  color: green;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ではカスタムプロパティでの変数のスコープはどうなっているのか。同じようなコードを用意する。今度はSassではなくCSSだ。&lt;/p&gt;

&lt;h3 id=&#34;css-1:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;CSS&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;:root {
  var-color: blue;
}

h1 {
  color: var(color); /* blue */
}

.first {
  var-color: green;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この結果は次のようになる。&lt;/p&gt;

&lt;div class=&#34;entry__media&#34;&gt;
![](/images/css-custom-property/02.png)
&lt;/div&gt;

&lt;p&gt;ここで注目したいところは、Sassの例のように&lt;code&gt;.first h1 {...}&lt;/code&gt;というように再度&lt;code&gt;h1&lt;/code&gt;ルールを定義しなおしていない点だ。これによってはSassにおける変数と、カスタムプロパティにおける変数の扱いに違いがあるのがわかる。&lt;/p&gt;

&lt;p&gt;さてここで先日登場した&lt;a href=&#34;http://www.myth.io/&#34;&gt;Myth&lt;/a&gt;というプリプロセッサの話を絡める。Mythは従来のプリプロセッサとは異なり、CSS Polyfillといったアプローチでつくられている。構文も独自のものではなく、進行中の仕様と同様の構文で書くことができる。その中には本記事のテーマであるカスタムプロパティも含まれており、Mythを介して非対応ブラウザでも使えるように&lt;strong&gt;みえる&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;このアプローチは面白いなぁと思っていたところ、&lt;a href=&#34;https://twitter.com/cssradar&#34;&gt;@cssradar&lt;/a&gt;から、CompassのChrisが&lt;a href=&#34;https://gist.github.com/chriseppstein/8016527&#34;&gt;インチキだとお怒り&lt;/a&gt;であることを聞いた。&lt;/p&gt;

&lt;p&gt;その具体的な例として、先ほどのスコープのくだりで説明したコードをそのままMythに通してみる。そうすると次のようなCSSになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  text-align: center;
}

h1 {
  color: blue;
}

.first {
  var-color: green;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;entry__media&#34;&gt;
![](/images/css-custom-property/03.png)
&lt;/div&gt;

&lt;p&gt;これは本来のカスタムプロパティの仕様として期待されるものではない。つまりはMythは一見はCSSの仕様通りに振るまいそうな打ち出し方であったものの実際には異なるということだ。
そもそもMythの内部は、Sass、LESSに次いて使われているであろう&lt;a href=&#34;http://learnboost.github.io/stylus/&#34;&gt;Stylus&lt;/a&gt;の開発者である&lt;a href=&#34;http://tjholowaychuk.com/post/44267035203/modular-css-preprocessing-with-rework&#34;&gt;TJがつくったRework&lt;/a&gt;の機能を元にしている。その中の&lt;a href=&#34;https://github.com/visionmedia/rework-vars&#34;&gt;変数&lt;/a&gt;の機能での説明では下記のように補足されている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N.B. This is not a polyfill. This plugin aims to provide a future-proof way of using a limited subset of the features provided by native CSS variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;あくまでこの機能で提供されるのはグローバルの変数のみだということだ。（少なくとも現状は。）
とはいえ、Mythには期待をしてるので、引き続き様子をみて触ってみたい。&lt;/p&gt;

&lt;h2 id=&#34;なかなか奥が深いカスタムプロパティ:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;なかなか奥が深いカスタムプロパティ&lt;/h2&gt;

&lt;p&gt;色々と試してみたものの、まだあまり上手く使える気はしないものの、これが他のブラウザでも実装されるようになれば色々とアイデアを考えてみたいものだ。&lt;/p&gt;

&lt;h2 id=&#34;というわけで:06c79ab8e5382aeb1c59f67c41152186&#34;&gt;というわけで&lt;/h2&gt;

&lt;p&gt;本記事は&lt;a href=&#34;http://www.adventar.org/calendars/57&#34;&gt;CSS Property Advent Calendar 2013&lt;/a&gt;の23日目の記事として書いた。&lt;br /&gt;
次は&lt;a href=&#34;http://www.adventar.org/users/2499&#34;&gt;noha_koさん&lt;/a&gt;です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Preprocessor Shootout（個人的な）</title>
      <link>http://localhost:1313/notes/css-preprocessor-shootout/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/css-preprocessor-shootout/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://lp26.cssnite.jp/&#34;&gt;CSS Nite LP, Disk 26「CSS Preprocessor Shootout」&lt;/a&gt;でLESSについてのお話をしてきた。&lt;/p&gt;

&lt;p&gt;当日の雰囲気や実況については&lt;a href=&#34;https://twitter.com/search?q=%23cssnite_lp26&#34;&gt;ハッシュタグを追っていただく&lt;/a&gt;として、ちょっとだけプリプロセッサ選びについてのフォローアップをば。&lt;/p&gt;

&lt;h2 id=&#34;cssプリプロセッサはどれがいいの:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;CSSプリプロセッサはどれがいいの？&lt;/h2&gt;

&lt;p&gt;イベントのサブタイトルにもなっている&lt;strong&gt;CSS Preprocessor Shootout&lt;/strong&gt;の元ネタは、イベントページの冒頭でも紹介されている通り、&lt;a href=&#34;http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/&#34;&gt;Sass vs. LESS vs. Stylus: Preprocessor Shootout&lt;/a&gt;という記事です。（英語ではありますが、この記事で基本的な文法は総ナメできます。）&lt;/p&gt;

&lt;p&gt;CSSプリプロセッサの基本的な機能はどれも一緒で、それに+αの違いがある。それゆえに「どれがいいの？」というのを知りたい、というのがある反面、しゃべる側も、どれがベストという結論を強く押し出すのは難しかった。講演ではそれぞれの特長のお話なり、実際つかったときの経験談なり、注意点なり、またより深いところなど&amp;hellip;という内容になった。&lt;/p&gt;

&lt;p&gt;時間が限られていたことも含め、講演ではカバーしきれなかったツールの特長のようなところに触れつつ、&lt;strong&gt;Shootout(撃ち合い)&lt;/strong&gt;ということもあり、僕個人としてひとつの結論を出してしまいましょう。&lt;/p&gt;

&lt;h3 id=&#34;less-http-lesscss-org:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;&lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;これからプリプロセッサはじめる人に勧めるなら&lt;strong&gt;LESS&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;なぜなら一番簡単だから。
そう宣言しつつも、以下必読。&lt;/p&gt;

&lt;p&gt;まずは僕が講演で取り上げたわけだが、実もフタもないことをいってしまえば、&lt;strong&gt;Stylus&lt;/strong&gt;の登場によって、LESSがSassと差をつけていたところがほぼ無くなっている、現状。
それはJavaScriptによる実装という点や、よりCSSに近い構文の簡潔さ、といったもの。&lt;/p&gt;

&lt;p&gt;ただ唯一の特徴としてはクライアントサイドで実行できること。これは本当に手軽。しかし本番環境で使うのは基本的にはNG。ただちょいと補足すると、講演でもLESSファイルのコンパイルのコストがかかるため、と話はしたものの、実際には最初のコンパイル以後は&lt;strong&gt;CSSをlocalStorageに保存してキャッシュ&lt;/strong&gt;する。&lt;/p&gt;

&lt;p&gt;とはいえど、初期の読み込みに時間もかかるわけですし、この機能が安定しているかどうかというのはわからない。（経験上、本番で基本的に使うことはないので）&lt;/p&gt;

&lt;p&gt;なのでこのようにLESSについては深く語れば語るほど、機能として秀でた特長というのはなく、ただただ&lt;strong&gt;シンプルである&lt;/strong&gt;ということが特長となる。&lt;/p&gt;

&lt;p&gt;今後はSassやStylusと大きな差をつけているExtendが実装されることで、世間的にはようやく横並びになるかもしれないが、それによってシンプルさというのも少し削られてしまうかもしれない。&lt;/p&gt;

&lt;p&gt;なのでLESSが凌いで、LESSが圧倒的に支持をうけることは無いでしょう。これはLESSを徹底してマスターしていくべきかどうかの理由として、重要なことです。（のちほどのSassにおけるメリットとして詳細は書く）&lt;/p&gt;

&lt;p&gt;こういった思いがあるゆえ、僕の講演でも、選択肢のひとつとしての可能性で締めさせていただいた。
しかし一方では、&lt;strong&gt;とりあえずCSSプリプロセッサを試したい&lt;/strong&gt;という人には強くおすすめできる。それから他のツールにはいっていくのでも全然構わない。&lt;/p&gt;

&lt;h3 id=&#34;stylus-http-learnboost-github-com-stylus:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;&lt;a href=&#34;http://learnboost.github.com/stylus/&#34;&gt;Stylus&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;僕個人として使うならば&lt;strong&gt;Stylus&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;なぜならSassとLESSのいいとこ取りをしているから。&lt;/p&gt;

&lt;p&gt;CSS（.styl）はLESSのように書けるし、SassのようなExtendもできる。透過的なMixinsも好み。&lt;/p&gt;

&lt;p&gt;ただStylusを強くおすすめするかというと、難しい。その理由はStylusを使っている事例が、少なくとも日本（日本語）では少ないから。いくつかStylusを解説している記事もあるが、Sassと比べれば全然少ない。&lt;/p&gt;

&lt;p&gt;それゆえに何かStylusのエラーなどにハマってしまった場合に、その解決策が見つかりにくい。なのでLESS/Sassをひと通り経験し、なおかつできればNode.jsに関連したツールを使っている経験があるような人の方が、問題なく使えそうなイメージはある。&lt;/p&gt;

&lt;p&gt;またStylusセッションの終盤にあった通り、現在&lt;a href=&#34;https://github.com/visionmedia/rework&#34;&gt;rework&lt;/a&gt;というプロジェクトも走っているので、今後Stylusの立ち位置がどうなるかはわからない。
※それでいうと、SassやLESSだってどうなるかはわからない。&lt;/p&gt;

&lt;p&gt;Stylusはこのようにやや玄人好みであるといっても、他のプリプロセッサ同様のレベルで使う分には、Stylusからはじめても構わない。それが Ruby+gemではじめるのか、Node.js+npmではじめるのかの違いくらい。無論GUIのツールを使ったって構わない。が、Stylusに対応しているものはやや少ないので、GUIの選択肢は少し減るだろう。&lt;/p&gt;

&lt;h3 id=&#34;sass-http-sass-lang-com:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;&lt;a href=&#34;http://sass-lang.com&#34;&gt;Sass&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;総合的にみて、人に勧めるならば、&lt;strong&gt;Sass&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;なぜなら、Sassについては機能的な言及はおいといて、単純に&lt;strong&gt;事例が多い&lt;/strong&gt;から。&lt;/p&gt;

&lt;p&gt;今回のイベントでもGREEさんやCookpadさんなどの大規模な事例もあれば、個人や中小レベルでの事例もある。そしてそれらのレベルではブログでもオープンに紹介されていることも多いし、&lt;a href=&#34;https://gihyo.jp/dp/ebook/2012/978-4-7741-5123-6&#34;&gt;日本語で解説された電子書籍&lt;/a&gt;だってある。&lt;/p&gt;

&lt;p&gt;検索すればトラブルシューティングもできるし、Sassに関連する便利なツールなども多くある。その代表するのが先に紹介したCompass。サポートするGUIツールも多いから、とりあえず使いたいっていう人はそれらを使えばいい。&lt;/p&gt;

&lt;p&gt;あくまでも勧めるならば、であり僕個人としては3つの中で一番&lt;strong&gt;好みではない&lt;/strong&gt;。それはもう本当に好みのレベルの話で、メジャーじゃないものに手を出したい感もあるし、コンパイルが遅いと思っているからだ。
コンパイルの遅さの体感は人によって違うし、それぞれを比べるのは、iPhoneのキャリアを変えたときのSoftbank vs auの回線速度みたいなレベルだとも思う。&lt;/p&gt;

&lt;p&gt;とはいえ仕事では基本的にSassを使う。なぜなら使える（使ったことがある）人が今の身の回りには多くて、引き継ぎや共通のライブラリをつくれるからだ。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;僕個人&lt;/strong&gt;（というのは強調しておきたい）としては、&lt;/p&gt;

&lt;h3 id=&#34;人に勧めるなら:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;人に勧めるなら&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Sass&lt;/li&gt;
&lt;li&gt;Stylus&lt;/li&gt;
&lt;li&gt;LESS&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;これからプリプロセッサはじめる人に勧めるなら:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;これからプリプロセッサはじめる人に勧めるなら&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;LESS&lt;/li&gt;
&lt;li&gt;Sass&lt;/li&gt;
&lt;li&gt;Stylus&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;僕が使うなら:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;僕が使うなら&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Stylus&lt;/li&gt;
&lt;li&gt;LESS&lt;/li&gt;
&lt;li&gt;Sass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;LESSの今後次第では、StylusじゃなくLESSになるかもしれないし、仕事でもLESSを推し進めていくかもしれない。（でもたぶんreworkに手を出す気もする）&lt;/p&gt;

&lt;h2 id=&#34;でも結局cssはcss:4a83ac6057e4f9b46e04e7b6f2740a9d&#34;&gt;でも結局CSSはCSS&lt;/h2&gt;

&lt;p&gt;イベントで数度繰り返していたが、CSSとしてちゃんと書けることがすべての前提。&lt;/p&gt;

&lt;p&gt;料理だって、基本的な調理方法や下ごしらえ、またそのコツなどがそれなりに見についていれば美味しい料理ができる。&lt;/p&gt;

&lt;p&gt;そこにすごく高機能な鍋なり、電子レンジなりの道具があれば、より美味しくつくれるかもしれないし、調理時間を短縮できてなおかつ美味しいものができるかもしれない。&lt;/p&gt;

&lt;p&gt;逆に基礎がなくて便利な調理道具だけがあっても、それを使っても料理は上手くならないし、調理道具で事故を起こす可能性だってある。&lt;/p&gt;

&lt;p&gt;（一方では、温めるだけで美味しい料理ができる、なんてものもあるが）&lt;/p&gt;

&lt;p&gt;結局イベントと同じような結論で恐縮だが、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ちゃんとCSSを書け&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;それに尽きる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最近のLESSの小話と新機能紹介（一部）</title>
      <link>http://localhost:1313/notes/less-new-colors/</link>
      <pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/less-new-colors/</guid>
      <description>

&lt;p&gt;※この記事は、&lt;a href=&#34;http://www.adventar.org/calendars/1&#34;&gt;CSS Preprocessor Advent Calendar 2012&lt;/a&gt;の7日目の記事の&lt;strong&gt;おまけ&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;CSSプリプロセッサ（CSSメタ言語）は、&lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;が人気かつ、アップデートも頻繁、新機能増えてる！みたいな空気を感じたりするんですが、&lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt;もがんばってます。&lt;/p&gt;

&lt;h2 id=&#34;開発の停滞:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;開発の停滞&lt;/h2&gt;

&lt;p&gt;5ヶ月ほど前に&lt;a href=&#34;http://crunchapp.net/&#34;&gt;Crunch&lt;/a&gt;というLESS対応エディタを開発しているMatthew Dean氏が、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;LESSの開発止まってますやん。それに比べてSassはめっちゃ更新してんで。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cloudhead/less.js/issues/867&#34;&gt;Is LESS in need of support?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というissueをあげた。&lt;/p&gt;

&lt;p&gt;それに対し、開発者のAlexis Sellier氏（&lt;a href=&#34;http://cloudhead.io/）が同issueにて、[このように](https://github.com/cloudhead/less.js/issues/867&#34;&gt;cloudhead&lt;/a&gt;コメントをあげた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;他にやることあるから、今LESSに割く時間ありませんわー（略）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cloudhead/less.js/issues/867#issuecomment-7036574&#34;&gt;https://github.com/cloudhead/less.js/issues/867#issuecomment-7036574&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんていうこともあったものの、&lt;a href=&#34;https://github.com/agatronic&#34;&gt;agatronic&lt;/a&gt;氏を中心に、LESSを愛する有志たちによって、現在ぼちぼちとメンテされている様子。&lt;/p&gt;

&lt;h2 id=&#34;最近のless:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;最近のLESS&lt;/h2&gt;

&lt;p&gt;最近のLESSの話題の目玉としては、&lt;a href=&#34;http://webtech-walker.com/archive/2012/12/less_extend.html&#34;&gt;アドベントカレンダー初日に@hokacchaが書いてくれた&lt;/a&gt;、LESSにおける@extendの機能でしょうか。&lt;/p&gt;

&lt;p&gt;SassがLESSに大きく差をつけた機能のひとつではあるのですが、これをなんと我らが@hokacchaが書いてくれたわけです。そこにシビれる、あこがれる。&lt;/p&gt;

&lt;p&gt;その進捗などは先の記事を見ていただくとして、他にアップデートされているものを少し紹介していく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cloudhead/less.js/blob/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;の1.3.1（2012-10-18 アップデート）から色々と追加された色関係のfunctionをピックアップ。
（強化するのはそこの機能じゃないんじゃ、という気もしないでもないですが）&lt;/p&gt;

&lt;h2 id=&#34;色関係の関数が盛りだくさん:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;色関係の関数が盛りだくさん。&lt;/h2&gt;

&lt;p&gt;追加されたのは下記。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;red&lt;/li&gt;
&lt;li&gt;green&lt;/li&gt;
&lt;li&gt;blue&lt;/li&gt;
&lt;li&gt;tint&lt;/li&gt;
&lt;li&gt;shade&lt;/li&gt;
&lt;li&gt;multiply&lt;/li&gt;
&lt;li&gt;screen&lt;/li&gt;
&lt;li&gt;overlay&lt;/li&gt;
&lt;li&gt;softlight&lt;/li&gt;
&lt;li&gt;hardlight&lt;/li&gt;
&lt;li&gt;difference&lt;/li&gt;
&lt;li&gt;exclusion&lt;/li&gt;
&lt;li&gt;average&lt;/li&gt;
&lt;li&gt;negation&lt;/li&gt;
&lt;li&gt;contrast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中から後半部分の&lt;strong&gt;Blending modes&lt;/strong&gt;と呼ばれるFunctionをいくつかピックアップする。Blending modesは、Photoshopでいうところの&lt;strong&gt;レイヤーの描画モード&lt;/strong&gt;みたいなものだ。おそらくPhotoshopのUIの言語設定を変えれば、これらの単語が表示されるはず。今回紹介するものがそれらツールとまったく同じアルゴリズムかはわからないが、おそらくはこれらを元にしてつくられたFunctionではないかとおもう。&lt;/p&gt;

&lt;p&gt;これらのFunctionは、第一引数と第二引数の色を掛け合わせるなどしてブレンドする。&lt;/p&gt;

&lt;h3 id=&#34;multiply:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;multiply&lt;/h3&gt;

&lt;p&gt;Photoshopでいうところの&lt;strong&gt;乗算&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-color: multiply(@colorA,@colorB);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;screen:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;screen&lt;/h3&gt;

&lt;p&gt;Photoshopでいうところの&lt;strong&gt;スクリーン&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-color: screen(@colorA,@colorB);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;overlay:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;overlay&lt;/h3&gt;

&lt;p&gt;Photoshopでいうところの&lt;strong&gt;オーバーレイ&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-color: overlay(@colorA,@colorB);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hardlight:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;hardlight&lt;/h3&gt;

&lt;p&gt;Photoshopでいうところの&lt;strong&gt;ハードライト&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-color: hardlight(@colorA,@colorB);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;difference:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;difference&lt;/h3&gt;

&lt;p&gt;Photoshopでいうところの&lt;strong&gt;差の絶対値&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-color: difference(@colorA,@colorB);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;average:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;average&lt;/h3&gt;

&lt;p&gt;Photoshopでは存在しないかもしれないが、Fireworksでいうところの&lt;strong&gt;平均&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-color: average(@colorA,@colorB);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;一応サンプル:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;一応サンプル&lt;/h3&gt;

&lt;p&gt;StyleDoccoでつくった&lt;a href=&#34;http://localhost:1313/demo/less-new-colors/less.html&#34;&gt;サンプルページ&lt;/a&gt;も用意しておく。&lt;a href=&#34;http://localhost:1313/notes/2012/12/07/css-preprocessor-styleguide.html&#34;&gt;StyleDoccoについてはこちら&lt;/a&gt;を参照してほしい。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:f05c5b2d7e345ff5f4b1bef7c5cccdcb:styledocco-less&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:f05c5b2d7e345ff5f4b1bef7c5cccdcb:styledocco-less&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&#34;続きはcss-nite-lp26で-たぶん:f05c5b2d7e345ff5f4b1bef7c5cccdcb&#34;&gt;続きはCSS Nite LP26で！（たぶん）&lt;/h2&gt;

&lt;p&gt;2013年1月12日（土）に開催される、&lt;a href=&#34;http://lp26.cssnite.jp/&#34;&gt;CSS Nite LP, Disk 26「CSS Preprocessor Shootout」&lt;/a&gt;では&lt;strong&gt;LESS&lt;/strong&gt;についての話をする予定なので、本記事で紹介しなかった関数も紹介するかもしれません。しないかもしれません。&lt;/p&gt;

&lt;p&gt;残席残りわずかなようですが、興味がある方はぜひ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:f05c5b2d7e345ff5f4b1bef7c5cccdcb:styledocco-less&#34;&gt;このように、LESSもそのままStyleDoccoに放り込める。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:f05c5b2d7e345ff5f4b1bef7c5cccdcb:styledocco-less&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CSSプリプロセッサでスタイルガイド</title>
      <link>http://localhost:1313/notes/css-preprocessor-styleguide/</link>
      <pubDate>Fri, 07 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/css-preprocessor-styleguide/</guid>
      <description>

&lt;p&gt;※この記事は、&lt;a href=&#34;http://www.adventar.org/calendars/1&#34;&gt;CSS Preprocessor Advent Calendar 2012&lt;/a&gt;の7日目の記事です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hitoyam.com/web/2012/12/04_1752.html&#34;&gt;CSS PreprocessorとIAの親和性&lt;/a&gt;、という記事の影響を受けまして、こちらの記事で書かれていた、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS Preprocessor そのものを共通ドキュメントにしてしまうとか&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という点を拾わせていただき、&lt;strong&gt;スタイルガイド&lt;/strong&gt;のツールを紹介しようとおもう。&lt;/p&gt;

&lt;h2 id=&#34;スタイルガイドとはなにか:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;スタイルガイドとはなにか&lt;/h2&gt;

&lt;p&gt;スタイルガイドは簡単にいうと、&lt;a href=&#34;http://ameblo.jp/ca-1pixel/entry-11413319214.html&#34;&gt;モバイル時代におけるCSSの設計と実装&lt;/a&gt;から引用させてもらうと、ページ上の部品（コンポーネント）をあつめたリスト、ページのこと。デザインパターンと呼ばれることもあるかもしれない。&lt;/p&gt;

&lt;p&gt;具体的な成果物としてどういったものを指すのかというのは実際のページをみてもらう方が早いとおもうので、一度下記のページも参照してほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.flickr.com/photos/aarronwalter/5579386649/sizes/o/in/photostream/&#34;&gt;MailChimp Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.starbucks.com/static/reference/styleguide/&#34;&gt;Starbucs Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/styleguide/css&#34;&gt;Github Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gimmebar.com/collection/4ecd439c2f0aaad734000022/front-end-styleguides&#34;&gt;Gimme Bar : Front end styleguides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;スタイルガイドをどうやって作るか:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;スタイルガイドをどうやって作るか&lt;/h2&gt;

&lt;p&gt;あらかじめコンポーネント設計ができているという前提で、ソレを元にこうしたスタイルガイドをつくるにはどうすれば良いか。&lt;/p&gt;

&lt;p&gt;ガイドラインやドキュメントというと、別途そうしたものをパワーポイントなり他のツールでそれらしいものをつくる、という方向に走ってしまうかもしれない。&lt;/p&gt;

&lt;p&gt;それ自体は問題はないが、問題は&lt;strong&gt;メンテナンスされるかどうか&lt;/strong&gt;だ。&lt;/p&gt;

&lt;p&gt;開発上の仕様変更もあれば、運用をはじめてから発生する変更もある。それにともないデザインもコードも書き換わるわけなので、仮にスタイルガイドにあたるドキュメントをつくっていたとしても、そちらが更新されていないと意味がなく、より混乱をさせてしまうものになるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;スタイルガイドは-生きている-ドキュメントでなければいけない:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;スタイルガイドは&amp;rdquo;生きている&amp;rdquo;ドキュメントでなければいけない&lt;/h2&gt;

&lt;p&gt;スタイルガイドそのものはCSSにおけるスタイルということではなく、他の言語でもあるものだが、ここではCSSスタイルガイドということで話を進める。&lt;/p&gt;

&lt;p&gt;CSSに記述されたルールセットが何を意味するのか、何をするものなのか、というのは&lt;strong&gt;コメント&lt;/strong&gt;という形で書くことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;/*
基本的なボタンのスタイル。

&amp;lt;button class=&amp;quot;btn&amp;quot;&amp;gt;次へ&amp;lt;/button&amp;gt;
 */
.btn {
	display: inline-block;
	background-color: #CCC;
	...
}
/*
&amp;quot;保存&amp;quot;や&amp;quot;完了&amp;quot;など主要なボタンのスタイル。
.btnをベースとし、拡張する。

&amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;次へ&amp;lt;/button&amp;gt;
*/
.btn-primary {
	display: inline-block;
	background-color: #33FF00;
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSSの設計としてのわかりやすさを保つことはもちろん、このように第三者がみてもわかるようなコメントを残しておくのはスタイルガイドうんぬんとは別で残しておく方が好ましい。&lt;/p&gt;

&lt;p&gt;しかしコードだけではこれがどのような見た目・表現となるのかはわからない。ではそれをカバーするために、サンプルのHTMLファイルを用意して…となると、これはまた先程のドキュメントが分割されることデメリットを招くことになる。&lt;/p&gt;

&lt;p&gt;このような、スタイルガイドをつくる上で課題となる要素をカバーしてくれるのが、&lt;a href=&#34;http://jacobrask.github.com/styledocco/&#34;&gt;StyleDocco&lt;/a&gt;、&lt;a href=&#34;http://warpspire.com/kss/&#34;&gt;KSS&lt;/a&gt;や、といった、スタイルガイドジェネレータだ。これらを使うことで、先に紹介した実例ようなコンポーネントスタイルをデザインとして見せることも、コードサンプルを明示することもできる。&lt;/p&gt;

&lt;p&gt;StyleDoccoはNode.jsで実装されており、KSSはRubyで実装されている。&lt;/p&gt;

&lt;p&gt;KSSは、先程のスタイルガイドの実例であげたGithubの&lt;a href=&#34;http://warpspire.com/posts/kss/&#34;&gt;Kyle Neath&lt;/a&gt;氏が開発したものだ。KSSに関連した、彼のプレゼンテーションスライドも是非一度見てほしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/kneath/a-better-future-with-kss&#34;&gt;A better future with KSS // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;styledocco:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;StyleDocco&lt;/h2&gt;

&lt;p&gt;とりあえず試してみるのなら、おそらくStyleDoccoの方が容易なので、StyleDoccoを使った例で紹介する。今回はStyledoccoのインストールの詳細などは省くので、&lt;a href=&#34;http://jacobrask.github.com/styledocco/&#34;&gt;StyleDocco&lt;/a&gt;の&lt;strong&gt;Installation&lt;/strong&gt;の節を参照してほしい。省くといっても、&lt;strong&gt;node.js&lt;/strong&gt;および&lt;strong&gt;npm&lt;/strong&gt;がインストールされている前提であれば、&lt;code&gt;npm install -fg styledocco&lt;/code&gt;と、ターミナルなどの黒い画面で叩くだけだが。&lt;/p&gt;

&lt;h3 id=&#34;成果物:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;成果物&lt;/h3&gt;

&lt;p&gt;結論的に、&lt;strong&gt;何をすればどうなるのか&lt;/strong&gt;、というのを先に出すと、次のようなコードを書いたCSSファイルに対して、StyleDoccoのコマンドを実行すれば&lt;a href=&#34;http://localhost:1313/images/posts/styledocco-sample.png&#34;&gt;こういう形&lt;/a&gt;のものができる。&lt;/p&gt;

&lt;p&gt;もちろんこのCSSというのは、ドキュメント用のCSSファイルといったものではなく、実際のページを構成するCSSファイルを指す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*
# アイコン
アイコン用モジュール。

`ico`をベースとし、サイズ用のclass、アイコン画像のclassで拡張する。

\`\`\`
&amp;lt;div class=&amp;quot;the-footer&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;
    &amp;lt;i class=&amp;quot;ico ico-24 ico-twitter&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;i class=&amp;quot;ico ico-36 ico-twitter&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;
    &amp;lt;i class=&amp;quot;ico ico-24 ico-github&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;i class=&amp;quot;ico ico-36 ico-github&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
\`\`\`
*/
.ico {
	display: inline-block;
	-webkit-background-size: 100% 100%;
	background-size: 100% 100%;
}

.ico-24 {
	width: 24px;
	height: 24px;
}

.ico-36 {
	width: 36px;
	height: 36px;
}
.ico-twitter {
	background: url(../images/ico-twitter.png);
}
.ico-github {
	background: url(../images/ico-github.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cssファイルのコメントをhtml化する:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;CSSファイルのコメントをHTML化する&lt;/h3&gt;

&lt;p&gt;StyleDoccoはCSSファイルに書かれたコメントを&lt;strong&gt;Markdown&lt;/strong&gt;という形式で書くことにより、対応したHTMLへと変換する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.2310.net/archives/6&#34;&gt;Markdownの文法&lt;/a&gt;はたくさんあるが、ここではよく使われるものをピックアップする。例を次にあげる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*
# 頭に`#`をつけると見出しになる

ここに説明文を書く。

\`\`\`
&amp;lt;!-- コードブロックは、バックティックを3つつけて囲むと、&amp;lt;pre/&amp;gt;でマークアップされる --&amp;gt;
&amp;lt;div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
\`\`\`
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントをいくつか挙げる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#&lt;/code&gt;であれば&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;、
&lt;code&gt;##&lt;/code&gt;であれば&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;、となる。&lt;/p&gt;

&lt;p&gt;`（バックティック）は &amp;lsquo;（シングルコーテーション）とは異なるので注意してほしい。またここに各コードはエスケープする必要はない。&lt;/p&gt;

&lt;h2 id=&#34;styledoccoを実行する:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;StyleDoccoを実行する&lt;/h2&gt;

&lt;p&gt;このような形式のコメントを書いたCSSファイル（仮に&lt;code&gt;style.css&lt;/code&gt;とする）に対し、StyleDoccoを実行する。&lt;/p&gt;

&lt;p&gt;一応どのように実行するのかというのを少し補足しておく。例えばコマンドラインツール上（シェル上）で、次のようなディレクトリにいるとする・&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /Users/myname/projects/mywebsite/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてこの&lt;strong&gt;mywebsite&lt;/strong&gt;ディレクトリの下に、先ほどの&lt;strong&gt;/css/style.css&lt;/strong&gt;が展開されているとする。&lt;/p&gt;

&lt;p&gt;この状態で、下記のようなコマンドを実行する。
（コマンドのオプションにある&lt;code&gt;-n&lt;/code&gt;は、プロジェクト名を書く。）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ styledocco -n &amp;quot;My Website&amp;quot; css/style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると、&lt;strong&gt;docs&lt;/strong&gt;というディレクトリと、その中にスタイルガイドのHTMLが生成されるので、それをブラウザで見れば、先のサンプルのようなページを確認することができる。&lt;/p&gt;

&lt;h2 id=&#34;cssファイルだけでなく-cssプリプロセッサのファイルでも可能:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;CSSファイルだけでなく、CSSプリプロセッサのファイルでも可能&lt;/h2&gt;

&lt;p&gt;ここでようやくCSSプリプロセッサの登場。&lt;/p&gt;

&lt;p&gt;CSSファイルをパースして、それらをHTML化するわけだが、CSSプリプロセッサのファイルを対象にしたときは、コンパイル前の内容でパースしてくれる。&lt;/p&gt;

&lt;p&gt;つまり、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*
# アイコン
アイコン用モジュール。

`ico`をベースとし、サイズ用のclass、アイコン画像のclassで拡張する。

アイコン画像は`_icon.scss`に格納し、`@import`で読み込む。

`.ico`を適用した要素内のコンテンツは、Image Replacementで隠す。
Image Replacementは、`_utility.scss`にある`.ir`で拡張する。

\`\`\`
&amp;lt;div class=&amp;quot;the-footer&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;
		&amp;lt;i class=&amp;quot;ico ico-24 ico-twitter&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
		&amp;lt;i class=&amp;quot;ico ico-36 ico-twitter&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;div class=&amp;quot;center&amp;quot;&amp;gt;
		&amp;lt;i class=&amp;quot;ico ico-24 ico-github&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
		&amp;lt;i class=&amp;quot;ico ico-36 ico-github&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
\`\`\`
*/
@import &amp;quot;icons&amp;quot;;

.ico {
	display: inline-block;
	-webkit-background-size: 100% 100%;
	background-size: 100% 100%;
	@extend .ir;
}

.ico-24 {
	width: 24px;
	height: 24px;
}

.ico-36 {
	width: 36px;
	height: 36px;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例えばこのように、SCSSな構文を交えることはもちろんのこと、Sassにおける&lt;code&gt;@import&lt;/code&gt;を前提とした場合でも、コード上部のデザインサンプルでは、&lt;strong&gt;コンパイル後のスタイル&lt;/strong&gt;が適用されたサンプルにしてくれる。&lt;/p&gt;

&lt;p&gt;こちらも参考までにスクリーンショットでお見せすると、&lt;a href=&#34;http://localhost:1313/images/posts/styledocco-sample-scss.png&#34;&gt;こういう形&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ここで、冒頭にあげた、&lt;a href=&#34;http://www.hitoyam.com/web/2012/12/04_1752.html&#34;&gt;CSS PreprocessorとIAの親和性&lt;/a&gt;の記事の話に戻るが、これを使えばSassなりLESSなり、またはStylusといったCSSプリプロセッサをそのまま活用して、コンポーネントリスト = スタイルガイドをつくることができる。&lt;/p&gt;

&lt;h2 id=&#34;css-cssプリプロセッサをもっと楽しく:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;CSS/CSSプリプロセッサをもっと楽しく&lt;/h2&gt;

&lt;p&gt;簡易的かつ短い解説であったので、これでもいまいちぱっとしないかもしれないが、StyleDoccoのようなツールを使うことで、CSSとそのコメントを書くのが楽しくなる。&lt;/p&gt;

&lt;p&gt;ちょっと難しいとおもわれるかもしれないが、是非一度試してほしい。&lt;/p&gt;

&lt;p&gt;また別の機会に、本ブログのスタイルガイドを公開できればとおもう。&lt;/p&gt;

&lt;h2 id=&#34;アドベントカレンダーは続く:4b9308a50e91660e4b35f1bedc4c5750&#34;&gt;アドベントカレンダーは続く&lt;/h2&gt;

&lt;p&gt;次は&lt;a href=&#34;http://havelog.ayumusato.com/&#34;&gt;ahomuの人&lt;/a&gt;です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>擬似要素のCSSアニメーションはinheritを使えば有効になる</title>
      <link>http://localhost:1313/notes/pseudo-animation/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/pseudo-animation/</guid>
      <description>

&lt;p&gt;Joshua Hibbert氏の記事、&lt;a href=&#34;http://joshnh.com/2012/10/25/dont-forget-the-css-value-inherit/&#34;&gt;Don&amp;rsquo;t Forget the CSS Value &amp;lsquo;inherit&amp;rsquo; - Joshua Hibbert&lt;/a&gt;では忘れられがちな&lt;code&gt;inherit&lt;/code&gt;による値の継承について説明している。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inherit&lt;/code&gt;を使えば親要素のスタイルの継承ができるが、これは要素とその擬似要素の関係においても、擬似要素が継承させることができる。&lt;/p&gt;

&lt;p&gt;で、この記事における本題としては、Bonus transition trickとして紹介されている、&lt;q&gt;inheritを使えば、擬似要素でもCSSアニメーションが有効になる&lt;/q&gt;という話のこと。&lt;/p&gt;

&lt;h2 id=&#34;擬似要素では-基本的に-アニメーションが無効となる:6d0445a544e9e551d3b3bcd680f1d6d7&#34;&gt;擬似要素では&amp;rdquo;基本的に&amp;rdquo;アニメーションが無効となる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://jsfiddle.net/joshnh/Fa9PH/&#34;&gt;Hibbert氏の記事にあるbasic sample&lt;/a&gt;を見てもらうとわかるのだが、右側（赤い方）では擬似要素に大しては継承を使っておらず、そのためアニメーションになっていない。大して一方では擬似要素もアニメーションをしており、該当のスタイルをみると&lt;code&gt;inherit&lt;/code&gt;を使っているのが確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  border: 2px solid black;
  -webkit-transition: .5s;
  transition: .5s;
}
div:hover {
  /* マウスオーバー時に背景色とボーダーの線の色を変える */
  background: blue;
  border-color: white;
}
.yay {
  background-color: green;
}
.yay:after {
  background-color: inherit; /* 継承 */
  border: inherit; /* 継承 */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;覚えておいて損はないかも:6d0445a544e9e551d3b3bcd680f1d6d7&#34;&gt;覚えておいて損はないかも&lt;/h2&gt;

&lt;p&gt;実務上ではあまりこれにハマることは少ないかもしれないが、同記事の&lt;a href=&#34;http://jsfiddle.net/joshnh/ELDet/&#34;&gt;別のサンプル&lt;/a&gt;のようなギミックを仕込むときなどには使そう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>画像からCSS Gradientのスタイルを抽出する</title>
      <link>http://localhost:1313/notes/gradient-imports-from-image/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/gradient-imports-from-image/</guid>
      <description>

&lt;p&gt;デザインカンプとして作られた画像のグラデーションをCSS化するために、PhotoshopやらFireworksで色を抽出してつくるは面倒くさい。単純にfromからtoまでの色を指定するだけであればそうでもないかもしれないが、すこし複雑な形状をしたグラデーションだと、正確に再現するのはむずかしい。&lt;/p&gt;

&lt;p&gt;ただPhotoshopであれば、&lt;a href=&#34;http://www.skyward-design.net/blog/archives/000102.html&#34;&gt;.psdファイル上でスタイルを取得するスクリプト&lt;/a&gt;があったり、Fireworks CS6でも&lt;a href=&#34;http://stocker.jp/diary/fireworks-cs6/&#34;&gt;オブジェクトのCSSを取得できる&lt;/a&gt;らしい。&lt;/p&gt;

&lt;p&gt;しかしこれらのような元のデザインデータが無いとか、基本的なフィルタのみで作られていないオブジェクトであればうまく抽出することができないこともあるので、画像（画像ファイル）そのものから抽出するツールを紹介する。&lt;/p&gt;

&lt;h2 id=&#34;画像ファイルをアップロードして抽出する:1455a558a9c55022301c9bcd10311df7&#34;&gt;画像ファイルをアップロードして抽出する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.colorzilla.com/gradient-editor/&#34;&gt;Ultimate CSS Gradient Generator - ColorZilla.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もしかしたら使ったことがある人も多いかもしれないが、このウェブサービスは、PhotoshopなどのツールライクなUIでグラデーションを指定し、スタイルを生成するサービスだ。&lt;/p&gt;

&lt;p&gt;Presetsから用意されているパターンを選び、そこから色を変えることもできるし、ツマミを調整すれば独自のグラデーションをつくることができる。&lt;/p&gt;

&lt;p&gt;変更はそのまますぐに右側にあるCSSに反映されるので、それをコピーすればいい。&lt;/p&gt;

&lt;p&gt;今回はこのツールの使い方の説明は省き、表題の画像をアップロードして抽出する方法を紹介する。そもそも難しいツールでもないので、触れば今回紹介する機能含め、簡単に使えるので試してほしい。&lt;/p&gt;

&lt;h2 id=&#34;import-from-image-からアップロードするだけ:1455a558a9c55022301c9bcd10311df7&#34;&gt;import from image からアップロードするだけ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/posts/gradient-imports-from-image-import.png&#34; alt=&#34;import from imageのキャプチャ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実は使い方として解説するということもなく、&lt;strong&gt;import from image&lt;/strong&gt;をクリックして画像をアップするだけだ。&lt;/p&gt;

&lt;p&gt;実際にアップロードしてみたものをいくつか挙げる。&lt;/p&gt;

&lt;h3 id=&#34;単純なグラデーション:1455a558a9c55022301c9bcd10311df7&#34;&gt;単純なグラデーション&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/posts/gradient-imports-from-image-gradient.png&#34; alt=&#34;単純なグラデーションのサンプル&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
	background: #669900;
	background: -moz-linear-gradient(top,  #669900 0%, #1d6176 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#669900), color-stop(100%,#1d6176));
	background: -webkit-linear-gradient(top,  #669900 0%,#1d6176 100%);
	background: -o-linear-gradient(top,  #669900 0%,#1d6176 100%);
	background: -ms-linear-gradient(top,  #669900 0%,#1d6176 100%);
	background: linear-gradient(to bottom,  #669900 0%,#1d6176 100%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記はこのスタイルを適用したもの。&lt;/p&gt;

&lt;div id=&#34;gradient-imports-from-image-gradient&#34;&gt;
&lt;style scoped=&#34;scoped&#34;&gt;
#gradient-imports-from-image-gradient div {
    display: block;
    width: 180px;
    height: 96px;
    background: #669900;
    background: -moz-linear-gradient(top,  #669900 0%, #1d6176 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#669900), color-stop(100%,#1d6176));
    background: -webkit-linear-gradient(top,  #669900 0%,#1d6176 100%);
    background: -o-linear-gradient(top,  #669900 0%,#1d6176 100%);
    background: -ms-linear-gradient(top,  #669900 0%,#1d6176 100%);
    background: linear-gradient(to bottom,  #669900 0%,#1d6176 100%);
}
&lt;/style&gt;
    &lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;どうでしょうか、だいたい一緒に見えますかね。&lt;/p&gt;

&lt;h3 id=&#34;少し複雑なグラデーション:1455a558a9c55022301c9bcd10311df7&#34;&gt;少し複雑なグラデーション&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/posts/gradient-imports-from-image-complex.png&#34; alt=&#34;少し複雑なグラデーションのサンプル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ボタンのようなグラデーション。少し中央がずれてしまったけれど、とりあえず。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
	background: #ff9966;
	background: -moz-linear-gradient(top,  #ff9966 0%, #ff7b57 52%, #ff4f41 54%, #ff3333 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ff9966), color-stop(52%,#ff7b57), color-stop(54%,#ff4f41), color-stop(100%,#ff3333));
	background: -webkit-linear-gradient(top,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
	background: -o-linear-gradient(top,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
	background: -ms-linear-gradient(top,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
	background: linear-gradient(to bottom,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSSを適用したのは下記。&lt;/p&gt;

&lt;div id=&#34;gradient-imports-from-image-complex&#34;&gt;
&lt;style scoped=&#34;scoped&#34;&gt;
#gradient-imports-from-image-complex div {
    display: block;
    width: 180px;
    height: 96px;
    background: #ff9966;
    background: -moz-linear-gradient(top,  #ff9966 0%, #ff7b57 52%, #ff4f41 54%, #ff3333 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ff9966), color-stop(52%,#ff7b57), color-stop(54%,#ff4f41), color-stop(100%,#ff3333));
    background: -webkit-linear-gradient(top,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
    background: -o-linear-gradient(top,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
    background: -ms-linear-gradient(top,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
    background: linear-gradient(to bottom,  #ff9966 0%,#ff7b57 52%,#ff4f41 54%,#ff3333 100%);
}
&lt;/style&gt;
    &lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ちょっとずれた位置まで丁寧に再現されているものの、画像の方の中央のボケが無くなっている。&lt;/p&gt;

&lt;h3 id=&#34;円形グラデーション:1455a558a9c55022301c9bcd10311df7&#34;&gt;円形グラデーション&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.colorzilla.com/gradient-editor/#whats-new&#34;&gt;円形グラデーションもサポートしている&lt;/a&gt;ようだが、画像アップロードの方はどうだろうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/posts/gradient-imports-from-image-circle.png&#34; alt=&#34;円形グラデーションのサンプル&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
	background: #ffcc00;
	background: -moz-radial-gradient(center, ellipse cover,  #ffcc00 0%, #ffcc00 100%);
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,#ffcc00), color-stop(100%,#ffcc00));
	background: -webkit-radial-gradient(center, ellipse cover,  #ffcc00 0%,#ffcc00 100%);
	background: -o-radial-gradient(center, ellipse cover,  #ffcc00 0%,#ffcc00 100%);
	background: -ms-radial-gradient(center, ellipse cover,  #ffcc00 0%,#ffcc00 100%);
	background: radial-gradient(ellipse at center,  #ffcc00 0%,#ffcc00 100%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;抽出したコードを見ても分かるとおもうが、色は1色しか抜けていない。&lt;/p&gt;

&lt;div id=&#34;gradient-imports-from-image-circle&#34;&gt;
&lt;style scoped=&#34;scoped&#34;&gt;
#gradient-imports-from-image-circle div {
    display: block;
    width: 180px;
    height: 180px;
    background: #ffcc00;
    background: -moz-radial-gradient(center, ellipse cover,  #ffcc00 0%, #ffcc00 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,#ffcc00), color-stop(100%,#ffcc00));
    background: -webkit-radial-gradient(center, ellipse cover,  #ffcc00 0%,#ffcc00 100%);
    background: -o-radial-gradient(center, ellipse cover,  #ffcc00 0%,#ffcc00 100%);
    background: -ms-radial-gradient(center, ellipse cover,  #ffcc00 0%,#ffcc00 100%);
    background: radial-gradient(ellipse at center,  #ffcc00 0%,#ffcc00 100%);
}
&lt;/style&gt;
    &lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;つまりこうなる。&lt;/p&gt;

&lt;p&gt;個人的には、線形のグラデーションと比べると、実用的にもあまり円形のCSSグラデーションを使う機会は少ないので、再現できなくてもとりあえずは気にしないでおく。&lt;/p&gt;

&lt;h2 id=&#34;100-の再現とはいえない:1455a558a9c55022301c9bcd10311df7&#34;&gt;100%の再現とはいえない&lt;/h2&gt;

&lt;p&gt;円形はともかく、複雑なグラデーションのサンプルのように、完全に再現するためのコードは線形のものでも100%なものは生成されない。見た目の再現を重要視するなら、そのまま画像を使う方が良いかもしれない。それでもかなり簡単なものなのでおすすめする。&lt;/p&gt;

&lt;h2 id=&#34;探せば他にもあるかも:1455a558a9c55022301c9bcd10311df7&#34;&gt;探せば他にもあるかも&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.stubbornella.org/content/2011/04/25/css-3-gradients/&#34;&gt;Nicole Sullivan&lt;/a&gt;氏の記事で紹介されたもの中には&lt;a href=&#34;https://github.com/bluesmoon/pngtocss&#34;&gt;コマンドラインツール&lt;/a&gt;もある様子。おそらく同じようにコマンドラインで実行するのはあると思われるので、また見つけて試せたら記事にしたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sass,LESS,StylusのColor functionsのコンパイル結果を比べてみた</title>
      <link>http://localhost:1313/notes/Preprocessor-color-functions/</link>
      <pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/notes/Preprocessor-color-functions/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;、&lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt;、&lt;a href=&#34;http://learnboost.github.com/stylus/&#34;&gt;Stylus&lt;/a&gt;といったCSSプリプロセッサには、色を扱うビルトインファンクションがある。&lt;/p&gt;

&lt;p&gt;それらの機能はプリプロセッサごとにさまざまだが、共通して存在するファンクションの一つとして、&lt;code&gt;lighten(color,percentage)&lt;/code&gt;、&lt;code&gt;darken(color,percentage)&lt;/code&gt;といった引数に指定した色を明るく/暗くするというのがある。&lt;/p&gt;

&lt;p&gt;明るく/暗く、といっても単純に明度を操作するのか、色々とごにょごにょしているのかは分からないが、とりあえず同じ書き方をするなら同じ値を返すだろう、という期待をしたくなるが、実際のところどうだろうか。&lt;/p&gt;

&lt;h2 id=&#34;ところでこれらの使い所はある:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;ところでこれらの使い所はある？&lt;/h2&gt;

&lt;p&gt;結論からいうと、実務では色系のファンクションなかなかお世話になることはない。というのも現状Photoshopのデザインカンプを元に、そのカンプ上の色を抽出して、文字色や背景色とする。&lt;/p&gt;

&lt;p&gt;ただHTMLのプロトタイプ先行での開発や、色に関して一定のルールや計算・設計をしている場合には、プリプロセッサの持つ色系ファンクションの機能を活用できるかもしれない。&lt;/p&gt;

&lt;p&gt;非常に簡易的な例であげると、ボタンのように少し立体的に魅せるためのグラデーション表現などに、&lt;code&gt;darken(color,percentage)&lt;/code&gt;は使える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;button {
	background-image: -webkit-linear-gradient(top,#EFEFEF,darken(#EFEFEF,30%));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように、メインカラー（明るい方のカラー）の色に対し、&lt;code&gt;darken&lt;/code&gt;を使って暗い色をつくるようにすれば、グラデーションをつくることができる。結果は下記。（例はSass）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;button {
  background-image: -webkit-linear-gradient(top, #efefef, #a3a3a3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;darkenのコンパイル後の結果を比べる:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;darkenのコンパイル後の結果を比べる&lt;/h2&gt;

&lt;p&gt;では本題ということで、例にもつかった&lt;code&gt;darken&lt;/code&gt;をSass,LESS,Stylusそれぞれで使ってみる。ドキュメントを簡単に見る限りでは同じ効果を出すものに見えるが、結果はどうだろうか。&lt;/p&gt;

&lt;p&gt;基本色、&lt;code&gt;darken&lt;/code&gt;のパーセンテージをまったく一緒にして比べてみる。&lt;/p&gt;

&lt;h3 id=&#34;sass:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;Sass&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;p {
  $textColor: #FF9933;
  color: darken($textColor,30%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンパイル結果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: #994c00;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;less:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;LESS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  textColor: #FF9933;
  color: darken(@textColor,30%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンパイル結果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: #994d00;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stylus:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  textColor = #FF9933;
  color: darken(textColor,30%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンパイル結果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: #d66b00;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ということでまとめると:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;ということでまとめると、&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;元の色 : &lt;span style=&#34;color:#FF9933&#34;&gt;#FF9933&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sass&lt;/strong&gt; : &lt;span style=&#34;color:#994c00&#34;&gt;#994c00&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LESS&lt;/strong&gt; : &lt;span style=&#34;color:#994d00&#34;&gt;#994d00&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stylus&lt;/strong&gt; : &lt;span style=&#34;color:#d66b00&#34;&gt;#d66b00&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;stylusでは値の違いが顕著:06131d33b5aa04bc4dd420c47b662c61&#34;&gt;Stylusでは値の違いが顕著&lt;/h2&gt;

&lt;p&gt;特に理由なく、&lt;strong&gt;&lt;span style=&#34;color:#FF9933&#34;&gt;#FF9933&lt;/span&gt;&lt;/strong&gt;という色を選んでみた結果では、Stylusだけ大幅に異なる。
ちなみに元の色を&lt;strong&gt;&lt;span style=&#34;color:#DDDDDD&#34;&gt;#DDDDDD&lt;/span&gt;&lt;/strong&gt;としてみると、その違いの幅は小さい。&lt;/p&gt;

&lt;p&gt;今回は&lt;code&gt;darken&lt;/code&gt;の仕様を調べたわけではないので、この理由については今回説明しないが、気をつけるべきことは、これらのファンクションを使っていて、他のプリプロセッサに乗り換える場合だ。&lt;/p&gt;

&lt;p&gt;同じようなファンクションだからといって、そのまま持ち込むと、このようにコンパイルしたあとCSSの値が変わることがあるということ。&lt;/p&gt;

&lt;p&gt;これらプリプロセッサの内部仕様をあまりちゃんと読む機会がなかったので、これを機にみてみると面白いかもしれない。今回とりあげたファンクションについては、次のリンク先を参照してほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#darken-instance_method&#34;&gt;Module: Sass::Script::Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lesscss.org/#-color-functions&#34;&gt;LESS « The Dynamic Stylesheet language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnboost.github.com/stylus/docs/bifs.html&#34;&gt;Stylus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>